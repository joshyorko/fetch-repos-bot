#!/usr/bin/env python3
"""
Utility script to shard work items into batches for parallel processing.
This script reads the work items generated by the producer and creates
sharded batches that can be distributed across matrix builds.
"""

import json
import math
import os
import sys
from pathlib import Path
from typing import List, Dict, Any


def load_work_items(work_items_path: str) -> List[Dict[str, Any]]:
    """Load work items from JSON file."""
    try:
        with open(work_items_path, 'r') as f:
            work_items = json.load(f)
        return work_items
    except FileNotFoundError:
        print(f"Error: Work items file not found: {work_items_path}")
        return []
    except json.JSONDecodeError as e:
        print(f"Error: Invalid JSON in work items file: {e}")
        return []


def shard_work_items(work_items: List[Dict[str, Any]], max_workers: int = 4) -> List[List[Dict[str, Any]]]:
    """
    Shard work items into batches for parallel processing.
    
    Args:
        work_items: List of work items to shard
        max_workers: Maximum number of parallel workers/shards
    
    Returns:
        List of sharded work item batches
    """
    if not work_items:
        return []
    
    # Filter out empty work items (items without payload)
    valid_work_items = [item for item in work_items if item.get('payload')]
    
    if not valid_work_items:
        print("No valid work items found (all items missing payload)")
        return []
    
    total_items = len(valid_work_items)
    
    # Calculate optimal number of workers (don't exceed total items)
    actual_workers = min(max_workers, total_items)
    
    # Calculate items per shard
    items_per_shard = math.ceil(total_items / actual_workers)
    
    print(f"Sharding {total_items} work items into {actual_workers} batches")
    print(f"Approximately {items_per_shard} items per batch")
    
    # Create shards
    shards = []
    for i in range(0, total_items, items_per_shard):
        shard = valid_work_items[i:i + items_per_shard]
        shards.append(shard)
    
    return shards


def save_sharded_work_items(shards: List[List[Dict[str, Any]]], output_dir: str):
    """Save sharded work items to separate files."""
    output_path = Path(output_dir)
    output_path.mkdir(parents=True, exist_ok=True)
    
    # Clear existing shard files
    for existing_file in output_path.glob("work-items-shard-*.json"):
        existing_file.unlink()
    
    shard_info = []
    
    for i, shard in enumerate(shards):
        shard_file = output_path / f"work-items-shard-{i}.json"
        with open(shard_file, 'w') as f:
            json.dump(shard, f, indent=2)
        
        shard_info.append({
            "shard_id": i,
            "file": str(shard_file),
            "item_count": len(shard)
        })
        
        print(f"Created shard {i}: {shard_file} ({len(shard)} items)")
    
    # Save shard information for matrix configuration
    matrix_file = output_path / "matrix-config.json"
    matrix_config = {
        "include": [{"shard_id": info["shard_id"]} for info in shard_info]
    }
    
    with open(matrix_file, 'w') as f:
        json.dump(matrix_config, f, indent=2)
    
    print(f"Created matrix configuration: {matrix_file}")
    
    return shard_info


def generate_github_actions_matrix(shards: List[List[Dict[str, Any]]]) -> Dict[str, Any]:
    """Generate GitHub Actions matrix configuration."""
    return {
        "shard_id": list(range(len(shards)))
    }


def main():
    """Main function to handle command line execution."""
    if len(sys.argv) < 2:
        print("Usage: python shard_workitems.py <work_items_file> [max_workers] [output_dir]")
        print("Example: python shard_workitems.py devdata/work-items-out/run-1/work-items.json 4 devdata/shards")
        sys.exit(1)
    
    work_items_file = sys.argv[1]
    max_workers = int(sys.argv[2]) if len(sys.argv) > 2 else 4
    output_dir = sys.argv[3] if len(sys.argv) > 3 else "devdata/shards"
    
    print(f"Loading work items from: {work_items_file}")
    work_items = load_work_items(work_items_file)
    
    if not work_items:
        print("No work items to process")
        sys.exit(1)
    
    print(f"Sharding with max_workers={max_workers}")
    shards = shard_work_items(work_items, max_workers)
    
    if not shards:
        print("No shards created")
        sys.exit(1)
    
    print(f"Saving shards to: {output_dir}")
    shard_info = save_sharded_work_items(shards, output_dir)
    
    # Output GitHub Actions matrix configuration for workflow
    matrix_config = generate_github_actions_matrix(shards)
    print(f"\nGitHub Actions Matrix Configuration:")
    print(json.dumps(matrix_config, indent=2))
    
    # Set GitHub Actions output for matrix
    if os.getenv('GITHUB_ACTIONS'):
        github_output = os.getenv('GITHUB_OUTPUT')
        if github_output:
            with open(github_output, 'a') as f:
                f.write(f"matrix={json.dumps(matrix_config)}\n")
                f.write(f"shard_count={len(shards)}\n")
    
    print(f"\nSharding complete! Created {len(shards)} shards with {sum(len(shard) for shard in shards)} total items")


if __name__ == "__main__":
    main()
