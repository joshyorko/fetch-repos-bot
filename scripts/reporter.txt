@task
def reporter():
    """Generate comprehensive reports on work item processing status."""
    summary_stats = {
        "total_items_processed": 0,
        "successful_items": 0,
        "failed_items": 0,
        "released_items": 0,
        "organizations": set(),
        "repositories": []
    }
    
    for item in workitems.inputs:
        try:
            payload = item.payload
            if not isinstance(payload, dict):
                print(f"Skipping item with non-dict payload: {payload}")
                item.fail("APPLICATION", code="INVALID_PAYLOAD", message="Payload is not a dict.")
                continue
            
            org_name = payload.get("org")
            if not org_name:
                org_name = get_org_name()
            
            if not org_name:
                print("Organization name is required in work item payload 'org' field or ORG_NAME environment variable.")
                item.fail("APPLICATION", code="MISSING_ORG_NAME", message="Organization name is missing.")
                continue
            
            print(f"Processing report for organization: {org_name}")
            
            # Collect statistics from work item
            status = payload.get("status", "unknown")
            repo_name = payload.get("name") or payload.get("Name", "unknown")
            
            summary_stats["total_items_processed"] += 1
            summary_stats["organizations"].add(org_name)
            
            # Count by status
            if status == "success":
                summary_stats["successful_items"] += 1
            elif status == "failed":
                summary_stats["failed_items"] += 1
            elif status == "released":
                summary_stats["released_items"] += 1
            
            # Add repository details
            summary_stats["repositories"].append({
                "name": repo_name,
                "org": org_name,
                "status": status,
                "url": payload.get("url") or payload.get("URL"),
                "error": payload.get("error")
            })
            
            item.done()
            
        except Exception as e:
            error_msg = f"Error processing report item: {str(e)}"
            print(error_msg)
            item.fail("APPLICATION", code="UNEXPECTED_ERROR", message=error_msg)
    
    # Generate final summary
    summary_stats["organizations"] = list(summary_stats["organizations"])
    success_rate = (summary_stats["successful_items"] / summary_stats["total_items_processed"] * 100) if summary_stats["total_items_processed"] > 0 else 0
    
    print("\n" + "="*50)
    print("FINAL PROCESSING REPORT")
    print("="*50)
    print(f"Organizations processed: {len(summary_stats['organizations'])}")
    print(f"Total repositories: {summary_stats['total_items_processed']}")
    print(f"✅ Successful: {summary_stats['successful_items']}")
    print(f"❌ Failed: {summary_stats['failed_items']}")
    print(f"🔄 Released (for retry): {summary_stats['released_items']}")
    print(f"📊 Success rate: {success_rate:.1f}%")
    print("="*50)
    
    # Save detailed report
    output_dir = get_output_dir() or Path("output")
    report_file = output_dir / f"final_report_{time.strftime('%Y%m%d-%H%M%S', time.gmtime())}.json"
    
    try:
        with open(report_file, 'w') as f:
            json.dump({
                "timestamp": time.strftime("%Y-%m-%d %H:%M:%S UTC", time.gmtime()),
                "summary": summary_stats,
                "success_rate_percent": success_rate
            }, f, indent=4)
        print(f"📄 Detailed report saved to: {report_file}")
    except Exception as e:
        print(f"Warning: Could not save detailed report: {e}")
