name: Robocorp ARC Producer-Consumer Matrix Workflow

on:
  workflow_dispatch:
    inputs:
      org_name:
        description: 'Organization name to fetch repositories from'
        default: 'joshyorko'
      max_workers:
        description: 'Maximum number of parallel workers'
        default: '4'
        type: string

jobs:
  producer:
    runs-on: arc-runner-fetch-repos-bot
    outputs:
      matrix: ${{ steps.get-matrix.outputs.matrix }}
      shard_count: ${{ steps.get-matrix.outputs.shard_count }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Ensure RCC is installed
        run: |
          if ! command -v rcc &> /dev/null; then
            sudo mv rcc /usr/local/bin/
          else
            echo "RCC is already installed."
          fi

      - name: Generate input work item for producer
        run: |
          mkdir -p devdata/work-items-in/test-input-for-producer
          echo '[{"payload": {"org": "${{ inputs.org_name }}"}}]' > devdata/work-items-in/test-input-for-producer/work-items.json

      - name: Run RCC Producer
        run: rcc run -t producer -e devdata/env-for-producer.json
        env:
          ORG_NAME: ${{ inputs.org_name }}
          MAX_WORKERS: ${{ inputs.max_workers }}

      - name: Get matrix configuration
        id: get-matrix
        run: |
          cat output/matrix-output.json
          MATRIX=$(cat output/matrix-output.json)
          echo "matrix=${MATRIX}" >> $GITHUB_OUTPUT
          SHARD_COUNT=$(echo "${MATRIX}" | jq '.matrix.include | length')
          echo "shard_count=${SHARD_COUNT}" >> $GITHUB_OUTPUT

      - name: Upload producer output
        uses: actions/upload-artifact@v4.6.2
        with:
          name: producer-output
          path: output/

    

  consumer:
    runs-on: arc-runner-fetch-repos-bot
    needs: producer
    if: needs.producer.outputs.shard_count > 0
    strategy:
      matrix: ${{ fromJson(needs.producer.outputs.matrix).matrix }}
      max-parallel: 4
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Ensure RCC is installed
        run: |
          if ! command -v rcc &> /dev/null; then
            sudo mv rcc /usr/local/bin/
          else
            echo "RCC is already installed."
          fi

      - name: Download sharded work items
        uses: actions/download-artifact@v4.3.0
        with:
          name: producer-output
          path: output/

      - name: Setup work items for this shard
        run: |
          mkdir -p devdata/work-items-in/shard-input/
          mkdir -p output/consumer-shard-output/
          cp output/shards/work-items-shard-${{ matrix.shard_id }}.json devdata/work-items-in/shard-input/work-items.json

      - name: Run RCC Sharded Consumer
        run: rcc run -t "Shard" -e devdata/env-for-sharded-consumer.json
        env:
          SHARD_ID: ${{ matrix.shard_id }}

      - name: Upload shard output
        uses: actions/upload-artifact@v4.6.2
        with:
          name: shard-output-${{ matrix.shard_id }}
          path: output

  combine:
    runs-on: arc-runner-fetch-repos-bot
    needs: [producer, consumer]
    if: always() && needs.producer.result == 'success'
    steps:
      - name: Download all shard outputs
        uses: actions/download-artifact@v4.3.0
        with:
          path: all-outputs/
          pattern: shard-output-*
          merge-multiple: true
