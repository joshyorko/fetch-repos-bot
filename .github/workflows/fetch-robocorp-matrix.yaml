name: Robocorp ARC Producer-Consumer Matrix Workflow

on:
  workflow_dispatch:
    inputs:
      org_name:
        description: 'Organization name to fetch repositories from'
        required: true
        type: string
        default: 'joshyorko'
      max_workers:
        description: 'Maximum number of parallel workers'
        required: false
        type: number
        default: 4

jobs:
  producer:
    runs-on: arc-runner-fetch-repos-bot
    outputs:
      matrix: ${{ steps.shard.outputs.matrix }}
      shard_count: ${{ steps.shard.outputs.shard_count }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Ensure RCC is installed
        run: |
          if ! command -v rcc &> /dev/null; then
            echo "RCC not found. Downloading..."
            curl -o rcc https://downloads.robocorp.com/rcc/releases/latest/linux64/rcc
            chmod +x rcc
            sudo mv rcc /usr/local/bin/
          else
            echo "RCC is already installed."
          fi

      - name: Generate input work item for producer
        run: |
          mkdir -p devdata/work-items-in/test-input-for-producer
          echo '[{"payload": {"org": "${{ inputs.org_name }}"}}]' > devdata/work-items-in/test-input-for-producer/work-items.json

      - name: Run RCC Producer
        run: rcc run -t producer -e devdata/env-for-producer.json
        env:
          ORG_NAME: ${{ inputs.org_name }}

      - name: Shard work items for parallel processing
        id: shard
        run: |
          echo "Sharding work items for parallel processing..."
          python shard_workitems.py devdata/work-items-out/run-1/work-items.json ${{ inputs.max_workers }} devdata/shards
          echo "Sharding complete"
        env:
          GITHUB_ACTIONS: true

      - name: Upload producer output
        uses: actions/upload-artifact@v4.6.2
        with:
          name: producer-output
          path: output/

      - name: Upload sharded work items
        uses: actions/upload-artifact@v4.6.2
        with:
          name: sharded-work-items
          path: devdata/shards/

  consumer:
    runs-on: arc-runner-fetch-repos-bot
    needs: producer
    if: needs.producer.outputs.shard_count > 0
    strategy:
      matrix: ${{ fromJson(needs.producer.outputs.matrix) }}
      max-parallel: 4 # Limit concurrent jobs to avoid overwhelming the runner
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Ensure RCC is installed
        run: |
          if ! command -v rcc &> /dev/null; then
            echo "RCC not found. Downloading..."
            curl -o rcc https://downloads.robocorp.com/rcc/releases/latest/linux64/rcc
            chmod +x rcc
            sudo mv rcc /usr/local/bin/
          else
            echo "RCC is already installed."
          fi

      - name: Download sharded work items
        uses: actions/download-artifact@v4.3.0
        with:
          name: sharded-work-items
          path: devdata/shards/

      - name: Setup work items for this shard
        run: |
          echo "Setting up work items for shard ${{ matrix.shard_id }}"
          mkdir -p devdata/work-items-in/shard-input
          cp devdata/shards/work-items-shard-${{ matrix.shard_id }}.json devdata/work-items-in/shard-input/work-items.json
          echo "Work items for shard ${{ matrix.shard_id }} are ready"

      - name: Run RCC Sharded Consumer
        run: rcc run -t "Shard" -e devdata/env-for-sharded-consumer.json
        env:
          ORG_NAME: ${{ inputs.org_name }}
          SHARD_ID: ${{ matrix.shard_id }}

      - name: Upload shard output
        uses: actions/upload-artifact@v4.6.2
        with:
          name: output-shard-${{ matrix.shard_id }}-${{ inputs.org_name }}
          path: output/

  combine:
    runs-on: arc-runner-fetch-repos-bot
    needs: [producer, consumer]
    if: always() && needs.producer.result == 'success'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Download all shard outputs
        uses: actions/download-artifact@v4.3.0
        with:
          pattern: output-shard-*-${{ inputs.org_name }}
          path: combined-output/
          merge-multiple: true

      - name: Setup Python for combining results
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Combine shard results
        run: |
          python -c "
          import json
          import os
          from pathlib import Path
          
          combined_output = Path('combined-output')
          reports = []
          
          # Collect all shard reports
          for report_file in combined_output.glob('shard-*-report.json'):
              with open(report_file, 'r') as f:
                  report = json.load(f)
                  reports.append(report)
          
          # Create combined report
          total_processed = sum(r['total_processed'] for r in reports)
          total_successful = sum(r['successful_clones'] for r in reports)
          total_failed = sum(r['failed_clones'] for r in reports)
          
          combined_report = {
              'org_name': '${{ inputs.org_name }}',
              'total_shards': len(reports),
              'total_repositories_processed': total_processed,
              'total_successful_clones': total_successful,
              'total_failed_clones': total_failed,
              'success_rate': round((total_successful / total_processed * 100) if total_processed > 0 else 0, 2),
              'shard_reports': reports
          }
          
          with open(combined_output / 'combined-report.json', 'w') as f:
              json.dump(combined_report, f, indent=2)
          
          print(f'Combined Report:')
          print(f'Organization: ${{ inputs.org_name }}')
          print(f'Total Shards: {len(reports)}')
          print(f'Total Repositories Processed: {total_processed}')
          print(f'Successful Clones: {total_successful}')
          print(f'Failed Clones: {total_failed}')
          print(f'Success Rate: {combined_report[\"success_rate\"]}%')
          "

      - name: Upload combined results
        uses: actions/upload-artifact@v4.6.2
        with:
          name: final-output-${{ inputs.org_name }}
          path: combined-output/
