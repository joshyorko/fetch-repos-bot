name: Robocorp ARC Producer-Consumer Matrix Workflow

on:
  workflow_dispatch:
    inputs:
      org_name:
        description: 'Organization name to fetch repositories from'
        default: 'joshyorko'
      max_workers:
        description: 'Maximum number of parallel workers'
        default: '4'
        type: string

jobs:
  producer:
    runs-on: arc-runner-fetch-repos-bot
    outputs:
      matrix: ${{ steps.get-matrix.outputs.matrix }}
      shard_count: ${{ steps.get-matrix.outputs.shard_count }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Ensure RCC is installed
        run: |
          if ! command -v rcc &> /dev/null; then
            sudo mv rcc /usr/local/bin/
          else
            echo "RCC is already installed."
          fi

      - name: Generate input work item for producer
        run: |
          mkdir -p devdata/work-items-in/input-for-producer
          echo '[{"payload": {"org": "${{ inputs.org_name }}"}}]' > devdata/work-items-in/input-for-producer/work-items.json

      - name: Run RCC Producer
        run: rcc run -t producer -e devdata/env-for-producer.json
        env:
          ORG_NAME: ${{ inputs.org_name }}

      - name: Generate shards and matrix
        run: |
          python3 -c "
          import json
          import os
          from pathlib import Path
          import math
          
          # Read work items from producer output
          with open('output/producer-to-consumer/work-items.json', 'r') as f:
              work_items = json.load(f)
          
          max_workers = int('${{ inputs.max_workers }}')
          total = len(work_items)
          per_shard = math.ceil(total / max_workers) if total > 0 else 0
          
          # Create shards
          shards_dir = Path('output/shards')
          shards_dir.mkdir(exist_ok=True)
          
          matrix_include = []
          for i in range(max_workers):
              start_idx = i * per_shard
              end_idx = min(start_idx + per_shard, total)
              
              if start_idx < total:
                  shard_items = work_items[start_idx:end_idx]
                  shard_file = shards_dir / f'work-items-shard-{i}.json'
                  
                  with open(shard_file, 'w') as f:
                      json.dump(shard_items, f)
                  
                  matrix_include.append({'shard_id': i})
                  print(f'Created shard {i} with {len(shard_items)} items')
          
          # Save matrix config
          matrix_config = {'matrix': {'include': matrix_include}}
          with open('output/matrix-output.json', 'w') as f:
              json.dump(matrix_config, f)
          
          print(f'Generated matrix with {len(matrix_include)} shards')
          "

      - name: Get matrix configuration
        id: get-matrix
        run: |
          cat output/matrix-output.json
          MATRIX=$(cat output/matrix-output.json)
          echo "matrix=${MATRIX}" >> $GITHUB_OUTPUT
          SHARD_COUNT=$(echo "${MATRIX}" | jq '.matrix.include | length')
          echo "shard_count=${SHARD_COUNT}" >> $GITHUB_OUTPUT

      - name: Upload producer output
        uses: actions/upload-artifact@v4.6.2
        with:
          name: producer-output
          path: output/

    

  consumer:
    runs-on: arc-runner-fetch-repos-bot
    needs: producer
    if: needs.producer.outputs.shard_count > 0
    strategy:
      matrix: ${{ fromJson(needs.producer.outputs.matrix).matrix }}
      max-parallel: 4
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Ensure RCC is installed
        run: |
          if ! command -v rcc &> /dev/null; then
            sudo mv rcc /usr/local/bin/
          else
            echo "RCC is already installed."
          fi

      - name: Download sharded work items
        uses: actions/download-artifact@v4.3.0
        with:
          name: producer-output
          path: output/

      - name: Setup work items for this shard
        run: |
          python3 shard_loader.py
        env:
          SHARD_ID: ${{ matrix.shard_id }}

      - name: Run RCC Consumer
        run: rcc run -t consumer -e devdata/env-for-consumer.json
        env:
          SHARD_ID: ${{ matrix.shard_id }}

      - name: Upload shard output
        uses: actions/upload-artifact@v4.6.2
        with:
          name: shard-output-${{ matrix.shard_id }}
          path: output
